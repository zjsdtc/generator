package ${package.Controller};
import com.ctsec.dzsw.core.dto.ValidGroup;
import com.ctsec.dzsw.core.dto.SearchDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.HttpServletRequest;
import com.ctsec.dzsw.core.controller.Result;
import java.util.List;
import java.io.Serializable;
import com.baomidou.mybatisplus.core.metadata.IPage;
import lombok.RequiredArgsConstructor;
import com.ctsec.dzsw.core.util.BeanCopyUtils;
import lombok.extern.slf4j.Slf4j;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * $!{table.comment} Controller
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${swagger2})
@Api(value = "#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", tags = "$!{table.comment}")
#end
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private final ${table.serviceName} ${table.firstCharToLower(${table.serviceName})};

    /**
     * 新增数据
     *
     * @param dto 实体对象
     * @return 新增结果
     */
    #if(${swagger2})
    @ApiOperation(value="新增数据")
    #end
    @PostMapping("insert")
    public Result insert(@RequestBody @Validated({ValidGroup.Save.class}) ${table.entityName}DTO dto)throws Exception {
        ${table.entityName} entity = BeanCopyUtils.copy(dto, ${table.entityName}.class);
        return success(this.${table.firstCharToLower(${table.serviceName})}.save(entity));
    }

    /**
     * 删除数据
     *
     * @param idList 主键数组
     * @return 删除结果
     */
    #if(${swagger2})
    @ApiOperation(value="删除数据")
    #end
    @PostMapping("delete")
    public Result delete(@RequestBody List<Long> idList)throws Exception {
        this.validate(idList);
        return success(this.${table.firstCharToLower(${table.serviceName})}.removeByIds(idList));
    }

    /**
    * 修改数据
    *
    * @param dto 实体对象
    * @return 修改结果
    */
    #if(${swagger2})
    @ApiOperation(value="修改数据")
    #end
    @PostMapping("update")
    public Result update(@RequestBody @Validated({ValidGroup.Update.class})  ${table.entityName}DTO dto)throws Exception {
        ${table.entityName} entity = BeanCopyUtils.copy(dto, ${table.entityName}.class);
        return success(this.${table.firstCharToLower(${table.serviceName})}.updateById(entity));
    }

    /**
     * 通过主键查询单条数据
     *
     * @param id 主键
     * @return 单条数据
     */
    #if(${swagger2})
    @ApiOperation(value="通过主键查询单条数据")
    #end
    @GetMapping("selectOne")
    public Result selectOne(@RequestParam Serializable id) {

        return success(this.${table.firstCharToLower(${table.serviceName})}.getById(id));
    }

    /**
     * 分页查询所有数据
     *
     * @param request 分页对象
     * @return 分页数据
     */
    #if(${swagger2})
    @ApiOperation(value="分页查询所有数据")
    #end
    @GetMapping("select")
    public Result select(HttpServletRequest request) {
        SearchDTO<${table.entityName}> searchDTO = new SearchDTO(${table.entityName}.class, request.getParameterMap());
        IPage<${table.entityName}> page = this.${table.firstCharToLower(${table.serviceName})}.page(searchDTO.getPage(),searchDTO.getQueryWrapper());
        return success(page);
    }

}

#end